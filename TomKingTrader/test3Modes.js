/**
 * Test All 3 Trading Modes - Comprehensive Status Check
 */

const { TastyTradeAPI } = require('./src/tastytradeAPI');

async function testMode(mode) {
    console.log('\n' + '='.repeat(70));
    console.log(`üîç TESTING ${mode.toUpperCase()} MODE`);
    console.log('='.repeat(70));
    
    process.env.TRADING_MODE = mode;
    
    try {
        // Clear the require cache to reload config with new mode
        delete require.cache[require.resolve('./credentials.config.js')];
        const config = require('./credentials.config.js');
        
        // Display configuration
        console.log('\nüìã Configuration:');
        console.log(`  Mode: ${config.mode}`);
        console.log(`  API URL: ${config.apiBaseUrl}`);
        console.log(`  Account: ${config.accountNumber}`);
        console.log(`  Live Trading: ${config.allowLiveTrading ? '‚úÖ ENABLED' : '‚ùå DISABLED'}`);
        
        if (mode === 'sandbox') {
            console.log('\n‚ö†Ô∏è  SANDBOX MODE STATUS:');
            console.log('  - Credentials: ' + (config.username.includes('SANDBOX') ? '‚ùå NOT CONFIGURED' : '‚úÖ CONFIGURED'));
            console.log('  - Purpose: Testing features with cert environment');
            console.log('  - Market Orders: Fill at $1');
            console.log('  - Limit Orders ‚â§$3: Fill immediately');
            console.log('  - Limit Orders >$3: Stay live, never fill');
            
            if (config.username.includes('SANDBOX')) {
                console.log('\n‚ùå Sandbox credentials not configured');
                console.log('  To use sandbox:');
                console.log('  1. Visit developer.tastyworks.com');
                console.log('  2. Create sandbox account');
                console.log('  3. Update credentials in config');
                return;
            }
        }
        
        if (mode === 'paper') {
            console.log('\nüìä PAPER TRADING MODE:');
            console.log(`  - Simulated Balance: ¬£${(config.simulatedBalance || 35000).toLocaleString()}`);
            console.log('  - Real Market Data: ‚úÖ REQUIRED');
            console.log('  - Order Execution: Simulated');
            console.log('  - Purpose: Strategy testing & backtesting');
        }
        
        if (mode === 'real') {
            console.log('\nüí∞ REAL TRADING MODE:');
            console.log('  - Real Money: ‚ö†Ô∏è  ACTUAL FUNDS AT RISK');
            console.log(`  - Max Order Value: ¬£${(config.maxOrderValue || 1000).toLocaleString()}`);
            console.log('  - Confirmation Required: ' + (config.requireConfirmation ? '‚úÖ' : '‚ùå'));
            console.log('  - Purpose: Live trading (currently DISABLED for safety)');
        }
        
        // Try to connect to API
        console.log('\nüîê Testing API Connection...');
        const api = new TastyTradeAPI();
        
        await api.authenticate();
        console.log('‚úÖ Authentication successful!');
        console.log(`  Account: ${api.accountNumber}`);
        
        // Get account details
        const accountStatus = await api.getAccountStatus();
        if (accountStatus && api.balance) {
            console.log('\nüíµ Account Balance:');
            console.log(`  Net Liquidating Value: ${api.balance['net-liquidating-value'] || '$0'}`);
            console.log(`  Cash Balance: ${api.balance['cash-balance'] || '$0'}`); 
            console.log(`  Buying Power: ${api.balance['derivative-buying-power'] || '$0'}`);
        }
        
        // Check positions
        console.log('\nüìà Current Positions:');
        if (api.positions && api.positions.length > 0) {
            api.positions.forEach(pos => {
                console.log(`  ${pos.symbol}: ${pos.quantity} @ ${pos['average-open-price']}`);
            });
        } else {
            console.log('  No open positions');
        }
        
        // Test market data
        console.log('\nüìä Market Data Test:');
        const spyQuote = await api.getQuote('SPY');
        if (spyQuote) {
            console.log(`  SPY: $${spyQuote.last} (Real data)`);
        }
        
        console.log('\n‚úÖ MODE OPERATIONAL');
        
    } catch (error) {
        console.log('\n‚ùå Mode Test Failed:');
        console.log('  Error:', error.message);
        
        if (error.message.includes('Grant revoked')) {
            console.log('  Note: Using session authentication fallback');
        }
    }
}

async function runAllTests() {
    console.log('üéØ TOM KING TRADING FRAMEWORK - 3-MODE SYSTEM TEST');
    console.log('üìÖ Date: ' + new Date().toISOString());
    
    // Test all three modes
    await testMode('sandbox');
    await testMode('paper');
    await testMode('real');
    
    console.log('\n' + '='.repeat(70));
    console.log('üìù MODE SUMMARY');
    console.log('='.repeat(70));
    console.log('\n1Ô∏è‚É£ SANDBOX MODE:');
    console.log('   Status: ‚ö†Ô∏è  Not configured (needs sandbox credentials)');
    console.log('   Purpose: Daily testing with cert environment');
    console.log('   Next: Create sandbox account at developer.tastyworks.com');
    
    console.log('\n2Ô∏è‚É£ PAPER TRADING MODE:');
    console.log('   Status: ‚úÖ WORKING with real market data');
    console.log('   Balance: ¬£35,000 simulated');
    console.log('   Purpose: Strategy testing, backtesting, long-term validation');
    
    console.log('\n3Ô∏è‚É£ REAL MODE:');
    console.log('   Status: ‚úÖ READY (safety disabled)');
    console.log('   Balance: Will show actual account balance');
    console.log('   Purpose: Live trading when ready');
    
    console.log('\n' + '='.repeat(70));
}

// Run tests
runAllTests().catch(console.error);