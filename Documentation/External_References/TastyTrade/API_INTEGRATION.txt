# TOM KING TRADING FRAMEWORK v17 - API INTEGRATION MODULE

## MODULE OVERVIEW

This module provides complete TastyTrade API integration for the Tom King Trading Framework. It handles OAuth2 authentication, market data collection, position management, WebSocket streaming, and order preparation (NO auto-submission for safety).

**Key Features:**
- OAuth2 authentication with automatic token refresh
- Complete market data collection for all framework requirements  
- Real-time position tracking and Greeks monitoring
- WebSocket streaming for live data feeds
- Order preparation and validation (manual submission)
- Comprehensive error handling with fallback to manual mode
- Data caching and synchronization

**Integration with CORE_FRAMEWORK.txt:**
- Provides `buildSearchedData()` function for automatic data collection
- Handles all API authentication and connection management
- Returns data in exact format expected by core pattern analysis
- Automatic fallback to SEARCH_PARSING.txt if API fails

## TASTYTRADE API CREDENTIALS

**IMPORTANT: Store these credentials securely in production!**

```javascript
const API_CREDENTIALS = {
  CLIENT_ID: 'bfca2bd1-b3f3-4941-b542-0267812f1b2f',
  CLIENT_SECRET: '98911c87a7287ac6665fc96a9a467d54fd02f7ed',
  REFRESH_TOKEN: 'eyJhbGciOiJFZERTQSIsInR5cCI6InJ0K2p3dCIsImtpZCI6IkZqVTdUT25qVEQ2WnVySlg2cVlwWmVPbzBDQzQ5TnIzR1pUN1E4MTc0cUkiLCJqa3UiOiJodHRwczovL2ludGVyaW9yLWFwaS5hcjIudGFzdHl0cmFkZS5zeXN0ZW1zL29hdXRoL2p3a3MifQ.eyJpc3MiOiJodHRwczovL2FwaS50YXN0eXRyYWRlLmNvbSIsInN1YiI6IlUyYTUyMWEwZS0zZmNmLTQzMjgtOGI5NS02MjA1ZDY4ODUwOGUiLCJpYXQiOjE3NTY0MTE3NzcsImF1ZCI6ImJmY2EyYmQxLWIzZjMtNDk0MS1iNTQyLTAyNjc4MTJmMWIyZiIsImdyYW50X2lkIjoiRzRmMzdmMTZjLWNlYTktNDhlYi05N2FiLTA1YzI0YjdiMDQ2OCIsInNjb3BlIjoicmVhZCB0cmFkZSBvcGVuaWQifQ.bA7Mt0YbQj5aCptb3BlxD67YnzdlWysWzqGYbNChCTMV1VfmRxsQMQ7yGMcrv28izZuIihzC7_-tWKkLhxZTAw'
};

// Environment Configuration
const ENVIRONMENTS = {
  SANDBOX: {
    API_BASE: 'https://api.cert.tastyworks.com',
    STREAMER: 'wss://streamer.cert.tastyworks.com',
    DXLINK: 'wss://tasty-openapi-ws.dxfeed.com/realtime'
  },
  PRODUCTION: {
    API_BASE: 'https://api.tastyworks.com',
    STREAMER: 'wss://streamer.tastyworks.com',
    DXLINK: 'wss://tasty-openapi-ws.dxfeed.com/realtime'
  }
};

const CURRENT_ENV = ENVIRONMENTS.PRODUCTION; // Default to production
```

## API AUTHENTICATION

### TokenManager Class
Handles OAuth2 token management with automatic refresh

```javascript
class TokenManager {
  constructor(refreshToken, clientSecret) {
    this.refreshToken = refreshToken;
    this.clientSecret = clientSecret;
    this.accessToken = null;
    this.tokenExpiry = null;
  }
  
  async getValidToken() {
    const now = Date.now();
    // Refresh 1 minute early to avoid expiration
    if (!this.accessToken || now >= this.tokenExpiry) {
      console.log('üîÑ Refreshing access token...');
      this.accessToken = await this.generateAccessToken();
      this.tokenExpiry = now + (14 * 60 * 1000); // 14 minutes (expires in 15)
    }
    return this.accessToken;
  }
  
  async generateAccessToken() {
    const env = CURRENT_ENV || ENVIRONMENTS.PRODUCTION;
    try {
      const response = await fetch(`${env.API_BASE}/oauth/token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'TomKingFramework/17.0'
        },
        body: JSON.stringify({
          grant_type: 'refresh_token',
          refresh_token: this.refreshToken,
          client_secret: this.clientSecret
        })
      });
      
      if (!response.ok) {
        throw new Error(`Token refresh failed: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ Access token refreshed successfully');
      return data.access_token;
    } catch (error) {
      console.error('üö® Token refresh failed:', error.message);
      throw error;
    }
  }
}
```

## API ERROR HANDLING & FALLBACK MECHANISMS

Complete error handling system for robust API operation with automatic fallback to manual mode.

```javascript
class APIFailureHandler {
  constructor() {
    this.failureCount = 0;
    this.lastFailure = null;
    this.fallbackMode = false;
    this.retryDelays = [1000, 5000, 15000, 30000]; // Progressive backoff in ms
  }
  
  async handleFailure(error, context) {
    this.failureCount++;
    this.lastFailure = Date.now();
    
    console.error(`üö® API Failure #${this.failureCount}:`, {
      context,
      error: error.message,
      code: error.code,
      time: new Date().toISOString()
    });
    
    switch(error.code || error.status) {
      case 401: // Authentication failure
        return this.handleAuthFailure();
      case 429: // Rate limited
        return this.handleRateLimit();
      case 500: // Server error
      case 502: // Bad gateway
      case 503: // Service unavailable
        return this.handleServerError();
      case 'ENOTFOUND':
      case 'ETIMEDOUT':
      case 'ECONNREFUSED':
        return this.handleNetworkError();
      default:
        return this.handleUnknownError(error);
    }
  }
  
  async handleAuthFailure() {
    console.log('üîí Authentication failed - switching to manual mode');
    return {
      action: 'SWITCH_TO_MANUAL',
      message: 'Authentication failed - switching to manual mode',
      instructions: 'Please re-enter credentials or use SEARCH_PARSING.txt for manual data entry'
    };
  }
  
  async handleRateLimit() {
    const waitTime = 60000; // 1 minute
    console.log(`‚è±Ô∏è Rate limited - waiting ${waitTime/1000} seconds`);
    await new Promise(r => setTimeout(r, waitTime));
    return { action: 'RETRY' };
  }
  
  async handleServerError() {
    if (this.failureCount >= 3) {
      this.fallbackMode = true;
      console.log('üö® Multiple server failures - activating emergency manual mode');
      return {
        action: 'EMERGENCY_MANUAL_MODE',
        message: 'TastyTrade API unavailable - emergency manual mode activated',
        instructions: 'Use SEARCH_PARSING.txt for manual data entry until service restored'
      };
    }
    const delay = this.retryDelays[Math.min(this.failureCount - 1, 3)];
    console.log(`üîÑ Server error - retrying in ${delay/1000} seconds`);
    await new Promise(r => setTimeout(r, delay));
    return { action: 'RETRY' };
  }
  
  async handleNetworkError() {
    const delay = this.retryDelays[Math.min(this.failureCount - 1, 3)];
    console.log(`üåê Network error - retrying in ${delay/1000} seconds`);
    await new Promise(r => setTimeout(r, delay));
    return { action: 'RETRY_WITH_BACKOFF' };
  }
  
  async handleUnknownError(error) {
    console.error('‚ùì Unknown error:', error);
    if (this.failureCount >= 5) {
      return {
        action: 'SWITCH_TO_MANUAL',
        message: 'Multiple failures detected - switching to manual mode'
      };
    }
    return { action: 'LOG_AND_CONTINUE' };
  }
  
  reset() {
    this.failureCount = 0;
    this.lastFailure = null;
    this.fallbackMode = false;
    console.log('‚úÖ API failure handler reset');
  }
}
```

### Data Synchronization Manager

```javascript
class DataSynchronizer {
  constructor() {
    this.lastSync = null;
    this.syncInterval = 5000; // 5 seconds
    this.dataCache = new Map();
    this.subscriptions = new Set();
  }
  
  async syncPositions(api) {
    try {
      const positions = await api.refreshPositions();
      this.dataCache.set('positions', positions);
      this.lastSync = Date.now();
      console.log(`üìä Synced ${positions.length} positions`);
      return positions;
    } catch (error) {
      console.error('Position sync failed:', error);
      return this.dataCache.get('positions') || [];
    }
  }
  
  async syncMarketData(api, symbols) {
    const results = {};
    for (const symbol of symbols) {
      try {
        const data = await api.getQuote(symbol);
        results[symbol] = data;
        this.dataCache.set(`quote_${symbol}`, data);
      } catch (error) {
        // Use cached data if available
        const cached = this.dataCache.get(`quote_${symbol}`);
        results[symbol] = cached || null;
        if (!cached) {
          console.warn(`‚ö†Ô∏è No data available for ${symbol}`);
        }
      }
    }
    return results;
  }
  
  startAutoSync(api, symbols) {
    this.stopAutoSync();
    console.log(`üîÑ Starting auto-sync for ${symbols.length} symbols`);
    this.syncTimer = setInterval(async () => {
      await this.syncPositions(api);
      await this.syncMarketData(api, symbols);
    }, this.syncInterval);
  }
  
  stopAutoSync() {
    if (this.syncTimer) {
      clearInterval(this.syncTimer);
      this.syncTimer = null;
      console.log('‚èπÔ∏è Auto-sync stopped');
    }
  }
}
```

## SYMBOL UTILITIES

Essential utilities for symbol conversion and date calculations.

```javascript
// Convert OCC symbol to TastyTrade streamer format
function occToStreamerSymbol(occSymbol) {
  // OCC format: SPXW  240112C05000000
  // Streamer format: .SPXW240112C5000
  try {
    const symbol = occSymbol.substring(0, 6).trim();
    const year = occSymbol.substring(6, 8);
    const month = occSymbol.substring(8, 10);
    const day = occSymbol.substring(10, 12);
    const type = occSymbol.substring(12, 13);
    const strike = parseInt(occSymbol.substring(13)) / 1000;
    
    return `.${symbol}${year}${month}${day}${type}${strike}`;
  } catch (error) {
    console.error('Symbol conversion error:', error);
    return occSymbol;
  }
}

// Get next Friday for expiration
function getNextFriday(date = new Date()) {
  const result = new Date(date);
  const day = result.getDay();
  const daysUntilFriday = (5 - day + 7) % 7 || 7;
  result.setDate(result.getDate() + daysUntilFriday);
  return result;
}

// Get 45 DTE expiration date
function get45DTEExpiration(date = new Date()) {
  const result = new Date(date);
  result.setDate(result.getDate() + 45);
  return getNextFriday(result);
}

// Get 90 DTE expiration date  
function get90DTEExpiration(date = new Date()) {
  const result = new Date(date);
  result.setDate(result.getDate() + 90);
  return getNextFriday(result);
}

// Format expiration date for API
function formatExpiration(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

// Calculate DTE from expiration string
function calculateDTE(expiration) {
  const exp = new Date(expiration);
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  exp.setHours(0, 0, 0, 0);
  const diffTime = exp - today;
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return Math.max(0, diffDays);
}
```

## GREEKS MONITOR

Complete Greeks monitoring with portfolio-level calculations.

```javascript
class GreeksMonitor {
  constructor(api) {
    this.api = api;
    this.positions = [];
    this.portfolioGreeks = {
      delta: 0,
      gamma: 0,
      theta: 0,
      vega: 0,
      rho: 0
    };
    this.updateInterval = 30000; // 30 seconds
    this.alerts = [];
  }
  
  async updatePositionGreeks() {
    try {
      this.positions = await this.api.refreshPositions();
      this.portfolioGreeks = this.calculatePortfolioGreeks();
      this.checkGreekAlerts();
      console.log('üìä Portfolio Greeks updated:', this.portfolioGreeks);
      return this.portfolioGreeks;
    } catch (error) {
      console.error('Greeks update failed:', error);
      return this.portfolioGreeks;
    }
  }
  
  calculatePortfolioGreeks() {
    const greeks = {
      delta: 0,
      gamma: 0,
      theta: 0,
      vega: 0,
      rho: 0
    };
    
    this.positions.forEach(position => {
      const quantity = parseInt(position.quantity) || 0;
      const multiplier = position.multiplier || 100;
      const size = quantity * multiplier;
      
      // Sum up portfolio Greeks
      greeks.delta += (position.delta || 0) * size;
      greeks.gamma += (position.gamma || 0) * size;  
      greeks.theta += (position.theta || 0) * size;
      greeks.vega += (position.vega || 0) * size;
      greeks.rho += (position.rho || 0) * size;
    });
    
    // Round to 2 decimal places
    Object.keys(greeks).forEach(key => {
      greeks[key] = Math.round(greeks[key] * 100) / 100;
    });
    
    return greeks;
  }
  
  checkGreekAlerts() {
    this.alerts = [];
    
    // Delta neutral alerts
    if (Math.abs(this.portfolioGreeks.delta) > 500) {
      this.alerts.push({
        type: 'DELTA_RISK',
        message: `Portfolio delta: ${this.portfolioGreeks.delta} - Consider hedging`,
        priority: 'HIGH'
      });
    }
    
    // Theta burn alerts
    if (this.portfolioGreeks.theta < -200) {
      this.alerts.push({
        type: 'THETA_BURN',
        message: `High theta burn: ¬£${Math.abs(this.portfolioGreeks.theta)}/day`,
        priority: 'MEDIUM'
      });
    }
    
    // Vega exposure alerts
    if (Math.abs(this.portfolioGreeks.vega) > 1000) {
      this.alerts.push({
        type: 'VEGA_RISK',
        message: `High vega exposure: ${this.portfolioGreeks.vega}`,
        priority: 'MEDIUM'
      });
    }
    
    return this.alerts;
  }
  
  startMonitoring() {
    this.stopMonitoring();
    console.log('üîç Starting Greeks monitoring...');
    this.monitorTimer = setInterval(() => {
      this.updatePositionGreeks();
    }, this.updateInterval);
  }
  
  stopMonitoring() {
    if (this.monitorTimer) {
      clearInterval(this.monitorTimer);
      this.monitorTimer = null;
    }
  }
}
```

## API DATA COLLECTION

### Main TastyTrade API Client

```javascript
class TastyTradeAPI {
  constructor(clientSecret, refreshToken, environment = 'production') {
    this.tokenManager = new TokenManager(refreshToken, clientSecret);
    this.env = environment.toUpperCase();
    this.baseURL = ENVIRONMENTS[this.env].API_BASE;
    this.accountNumber = null;
    this.positions = [];
    this.balance = null;
    this.marketDataCache = new Map();
    this.cacheTTL = 5000; // 5 seconds
    this.errorHandler = new APIFailureHandler();
    this.synchronizer = new DataSynchronizer();
    this.greeksMonitor = new GreeksMonitor(this);
  }
  
  async initialize() {
    try {
      console.log('üöÄ Initializing TastyTrade API connection...');
      
      // Get account info
      const accounts = await this.request('/customers/me/accounts');
      this.accountNumber = accounts.data.items[0]['account-number'];
      console.log(`‚úÖ Connected to account: ${this.accountNumber}`);
      
      // Load positions and balance
      await this.refreshPositions();
      await this.refreshBalance();
      
      // Start monitoring
      this.greeksMonitor.startMonitoring();
      
      console.log('‚úÖ API initialization complete');
      return true;
    } catch (error) {
      console.error('üö® API initialization failed:', error);
      const response = await this.errorHandler.handleFailure(error, 'initialization');
      
      if (response.action === 'SWITCH_TO_MANUAL') {
        throw new Error('API_FALLBACK_TO_MANUAL');
      }
      throw error;
    }
  }
  
  async request(endpoint, options = {}) {
    const maxRetries = 3;
    let retryCount = 0;
    
    while (retryCount < maxRetries) {
      try {
        const token = await this.tokenManager.getValidToken();
        
        const response = await fetch(`${this.baseURL}${endpoint}`, {
          ...options,
          headers: {
            'Authorization': `Bearer ${token}`,
            'User-Agent': 'TomKingFramework/17.0',
            'Content-Type': 'application/json',
            ...options.headers
          }
        });
        
        if (!response.ok) {
          const error = new Error(`API Error: ${response.statusText}`);
          error.status = response.status;
          throw error;
        }
        
        // Reset error handler on success
        this.errorHandler.reset();
        return response.json();
        
      } catch (error) {
        retryCount++;
        if (retryCount >= maxRetries) {
          throw error;
        }
        
        const response = await this.errorHandler.handleFailure(error, endpoint);
        if (response.action === 'SWITCH_TO_MANUAL') {
          throw new Error('API_FALLBACK_TO_MANUAL');
        }
        
        // Wait before retry
        await new Promise(r => setTimeout(r, 1000 * retryCount));
      }
    }
  }
  
  async refreshPositions() {
    try {
      const data = await this.request(`/accounts/${this.accountNumber}/positions`);
      this.positions = data.data.items.filter(pos => 
        pos.quantity !== 0 && pos.quantity !== '0'
      );
      console.log(`üìä Loaded ${this.positions.length} positions`);
      return this.positions;
    } catch (error) {
      console.error('Position refresh failed:', error);
      return this.positions;
    }
  }
  
  async refreshBalance() {
    try {
      const data = await this.request(`/accounts/${this.accountNumber}/balances`);
      const balances = data.data;
      
      this.balance = {
        netLiq: parseFloat(balances['net-liquidating-value'] || 0),
        buyingPower: parseFloat(balances['derivative-buying-power'] || 0),
        cashBalance: parseFloat(balances['cash-balance'] || 0),
        bpUsed: parseFloat(balances['derivative-buying-power-used'] || 0),
        totalBP: parseFloat(balances['derivative-buying-power'] || 0) + 
                 parseFloat(balances['derivative-buying-power-used'] || 0),
        dayTradeBuyingPower: parseFloat(balances['day-trade-buying-power'] || 0),
        maintenanceReq: parseFloat(balances['maintenance-requirement'] || 0)
      };
      
      // Calculate BP usage percentage
      this.balance.bpUsedPercent = this.balance.totalBP > 0 ? 
        Math.round((this.balance.bpUsed / this.balance.totalBP) * 100) : 0;
      
      console.log(`üí∞ Account balance: ¬£${this.balance.netLiq.toLocaleString()}, BP: ${this.balance.bpUsedPercent}%`);
      return this.balance;
    } catch (error) {
      console.error('Balance refresh failed:', error);
      return this.balance;
    }
  }
  
  async getQuotes(symbols) {
    try {
      const params = new URLSearchParams();
      symbols.forEach(symbol => {
        if (symbol.startsWith('/')) {
          params.append('future', symbol);
        } else if (symbol.includes(' ')) {
          params.append('equity-option', symbol);
        } else {
          params.append('equity', symbol);
        }
      });
      
      const data = await this.request(`/market-data?${params}`);
      return data;
    } catch (error) {
      console.error(`Quote fetch failed for ${symbols}:`, error);
      throw error;
    }
  }
  
  async getOptionChain(symbol, expiration = null) {
    try {
      let endpoint = `/option-chains/${symbol}/nested`;
      if (expiration) {
        endpoint += `?expiration=${expiration}`;
      }
      
      const chain = await this.request(endpoint);
      return this.parseOptionChain(chain);
    } catch (error) {
      console.error(`Option chain fetch failed for ${symbol}:`, error);
      return [];
    }
  }
  
  parseOptionChain(chainData) {
    try {
      if (!chainData.data || !chainData.data.items || !chainData.data.items[0]) {
        return [];
      }
      
      const expirations = chainData.data.items[0].expirations;
      return expirations.map(exp => ({
        date: exp['expiration-date'],
        dte: exp['days-to-expiration'],
        strikes: exp.strikes.map(strike => ({
          strike: parseFloat(strike['strike-price']),
          call: {
            bid: parseFloat(strike.call?.bid || 0),
            ask: parseFloat(strike.call?.ask || 0),
            last: parseFloat(strike.call?.last || 0),
            delta: parseFloat(strike.call?.delta || 0),
            gamma: parseFloat(strike.call?.gamma || 0),
            theta: parseFloat(strike.call?.theta || 0),
            vega: parseFloat(strike.call?.vega || 0),
            iv: parseFloat(strike.call?.['implied-volatility'] || 0)
          },
          put: {
            bid: parseFloat(strike.put?.bid || 0),
            ask: parseFloat(strike.put?.ask || 0),
            last: parseFloat(strike.put?.last || 0),
            delta: parseFloat(strike.put?.delta || 0),
            gamma: parseFloat(strike.put?.gamma || 0),
            theta: parseFloat(strike.put?.theta || 0),
            vega: parseFloat(strike.put?.vega || 0),
            iv: parseFloat(strike.put?.['implied-volatility'] || 0)
          },
          callStreamer: strike['call-streamer-symbol'],
          putStreamer: strike['put-streamer-symbol']
        }))
      }));
    } catch (error) {
      console.error('Option chain parse error:', error);
      return [];
    }
  }
  
  // Format positions for CORE_FRAMEWORK.txt compatibility
  formatPositionsForFramework() {
    try {
      if (!this.positions || this.positions.length === 0) {
        return 'none';
      }
      
      return this.positions.map(pos => {
        const ticker = pos.symbol.replace('/', '');
        const strategy = this.identifyStrategy(pos);
        const dte = pos['days-to-expiration'] || 0;
        const entry = pos['average-open-price'] || 0;
        const pl = pos['unrealized-day-gain-percent'] || 0;
        
        return `${ticker} ${strategy} (${dte} DTE, ${entry}, ${pl >= 0 ? '+' : ''}${pl}%)`;
      }).join(', ');
    } catch (error) {
      console.error('Position formatting error:', error);
      return 'none';
    }
  }
  
  identifyStrategy(position) {
    try {
      const dte = position['days-to-expiration'] || 0;
      const instrumentType = position['instrument-type'];
      
      if (dte === 0) return '0DTE';
      if (dte > 100 && dte < 130) return 'LT112';
      if (dte > 80 && dte < 100) return 'STRANGLE';
      if (dte > 300) return 'LEAP';
      if (position['underlying-symbol'] && instrumentType === 'Equity Option') return 'IPMCC';
      if (instrumentType === 'Future') return 'FUTURE';
      
      return 'UNKNOWN';
    } catch (error) {
      console.error('Strategy identification error:', error);
      return 'UNKNOWN';
    }
  }
  
  // Main function called by CORE_FRAMEWORK.txt
  async buildSearchedData() {
    try {
      console.log('üìä Building searchedData from TastyTrade API...');
      const collector = new MarketDataCollector(this);
      const searchedData = await collector.buildSearchedData();
      console.log('‚úÖ SearchedData built successfully from API');
      return searchedData;
    } catch (error) {
      console.error('üö® SearchedData build failed:', error);
      throw error;
    }
  }
  
  async getAccountStatus() {
    try {
      await this.refreshBalance();
      const status = await this.request(`/accounts/${this.accountNumber}/trading-status`);
      
      return {
        netLiq: this.balance.netLiq,
        buyingPower: this.balance.buyingPower,
        bpUsedPercent: this.balance.bpUsedPercent,
        cashBalance: this.balance.cashBalance,
        positions: this.formatPositionsForFramework(),
        canTrade: status.data['can-trade'],
        dayOfWeek: new Date().toLocaleDateString('en-US', { weekday: 'long' }),
        dateStr: new Date().toLocaleDateString('en-US'),
        timeStr: new Date().toLocaleTimeString('en-US'),
        vixLevel: null, // Will be populated by market data collection
        portfolioMargin: status.data['enhanced-fraud-safeguards-enabled'] || false,
        monthPL: 0 // Calculated separately
      };
    } catch (error) {
      console.error('Account status error:', error);
      throw error;
    }
  }
}
```

### Market Data Collector Class

```javascript
class MarketDataCollector {
  constructor(api) {
    this.api = api;
  }
  
  async buildSearchedData() {
    try {
      console.log('üîÑ Collecting market data from TastyTrade API...');
      
      const searchedData = {
        timestamp: new Date().toISOString(),
        source: 'TastyTrade_API',
        
        // Core market data (always required)
        ES: await this.getESData(),
        SPY: await this.getSPYData(), 
        VIX: await this.getVIXData(),
        DXY: await this.getDXYData(),
        
        // Time data
        TIME: {
          currentEST: new Date().toLocaleTimeString('en-US', { 
            timeZone: 'America/New_York',
            hour12: true 
          }),
          currentUK: new Date().toLocaleTimeString('en-GB', { 
            timeZone: 'Europe/London',
            hour12: false 
          }),
          marketStatus: await this.getMarketStatus()
        }
      };
      
      // Add phase-specific tickers based on account size
      const additionalTickers = await this.getPhaseSpecificTickers();
      for (const [ticker, data] of Object.entries(additionalTickers)) {
        searchedData[ticker] = data;
      }
      
      console.log(`‚úÖ Collected data for ${Object.keys(searchedData).length - 2} instruments`);
      return searchedData;
      
    } catch (error) {
      console.error('üö® Market data collection failed:', error);
      throw error;
    }
  }
  
  async getESData() {
    try {
      const quotes = await this.api.getQuotes(['/ES']);
      if (!quotes.data.items[0]) {
        throw new Error('ES quote not available');
      }
      
      const es = quotes.data.items[0];
      
      // Get option chain for strikes
      const optionChain = await this.api.getOptionChain('ES');
      const strikes = this.extractOptionStrikes(optionChain, parseFloat(es.last));
      
      return {
        currentPrice: parseFloat(es.last),
        openPrice: parseFloat(es.open),
        previousClose: parseFloat(es['previous-close'] || es.close),
        dayHigh: parseFloat(es.high),
        dayLow: parseFloat(es.low),
        dayChange: parseFloat(es.last) - parseFloat(es.open),
        dayChangePercent: ((parseFloat(es.last) - parseFloat(es.open)) / parseFloat(es.open) * 100).toFixed(2),
        bid: parseFloat(es.bid),
        ask: parseFloat(es.ask),
        volume: parseInt(es.volume || 0),
        high5d: parseFloat(es['5-day-high'] || es.high),
        low5d: parseFloat(es['5-day-low'] || es.low),
        high20d: parseFloat(es['20-day-high'] || es.high),
        low20d: parseFloat(es['20-day-low'] || es.low),
        atr: parseFloat(es['average-true-range'] || 0),
        rsi: parseFloat(es['relative-strength-index'] || 50),
        ema8: parseFloat(es['8-day-ema'] || es.last),
        ema21: parseFloat(es['21-day-ema'] || es.last),
        vwap: parseFloat(es.vwap || es.last),
        iv: parseFloat(es['implied-volatility'] || 0),
        ivRank: parseFloat(es['iv-rank'] || 0),
        ivPercentile: parseFloat(es['iv-percentile'] || 0),
        strikes
      };
    } catch (error) {
      console.error('ES data collection failed:', error);
      return this.getDefaultESData();
    }
  }
  
  async getSPYData() {
    try {
      const quotes = await this.api.getQuotes(['SPY']);
      if (!quotes.data.items[0]) {
        throw new Error('SPY quote not available');
      }
      
      const spy = quotes.data.items[0];
      
      return {
        currentPrice: parseFloat(spy.last),
        openPrice: parseFloat(spy.open),
        dayHigh: parseFloat(spy.high),
        dayLow: parseFloat(spy.low),
        dayChange: parseFloat(spy.last) - parseFloat(spy.open),
        dayChangePercent: ((parseFloat(spy.last) - parseFloat(spy.open)) / parseFloat(spy.open) * 100).toFixed(2),
        bid: parseFloat(spy.bid),
        ask: parseFloat(spy.ask),
        volume: parseInt(spy.volume || 0),
        high20d: parseFloat(spy['20-day-high'] || spy.high),
        low20d: parseFloat(spy['20-day-low'] || spy.low),
        atr: parseFloat(spy['average-true-range'] || 0),
        rsi: parseFloat(spy['relative-strength-index'] || 50),
        ema8: parseFloat(spy['8-day-ema'] || spy.last),
        ema21: parseFloat(spy['21-day-ema'] || spy.last),
        vwap: parseFloat(spy.vwap || spy.last),
        ivRank: parseFloat(spy['iv-rank'] || 0),
        ivPercentile: parseFloat(spy['iv-percentile'] || 0)
      };
    } catch (error) {
      console.error('SPY data collection failed:', error);
      return { currentPrice: 0, error: 'Data unavailable' };
    }
  }
  
  async getVIXData() {
    try {
      const quotes = await this.api.getQuotes(['VIX']);
      if (!quotes.data.items[0]) {
        throw new Error('VIX quote not available');
      }
      
      const vix = quotes.data.items[0];
      const currentLevel = parseFloat(vix.last);
      
      return {
        currentLevel,
        dayChange: parseFloat(vix.last) - parseFloat(vix['previous-close'] || vix.last),
        dayChangePercent: ((parseFloat(vix.last) - parseFloat(vix['previous-close'] || vix.last)) / parseFloat(vix['previous-close'] || vix.last) * 100).toFixed(2),
        dayHigh: parseFloat(vix.high),
        dayLow: parseFloat(vix.low),
        avg20d: parseFloat(vix['20-day-average'] || currentLevel),
        trend: currentLevel > parseFloat(vix['20-day-average'] || currentLevel) ? 'RISING' : 'FALLING',
        regime: this.getVIXRegime(currentLevel)
      };
    } catch (error) {
      console.error('VIX data collection failed:', error);
      return { currentLevel: 15, error: 'Data unavailable', regime: 'UNKNOWN' };
    }
  }
  
  async getDXYData() {
    try {
      const quotes = await this.api.getQuotes(['DXY']);
      if (!quotes.data.items[0]) {
        return { currentLevel: 103, trend: 'UNKNOWN', error: 'Data unavailable' };
      }
      
      const dxy = quotes.data.items[0];
      
      return {
        currentLevel: parseFloat(dxy.last),
        dayChange: parseFloat(dxy.last) - parseFloat(dxy.open),
        dayChangePercent: ((parseFloat(dxy.last) - parseFloat(dxy.open)) / parseFloat(dxy.open) * 100).toFixed(2),
        trend: parseFloat(dxy.last) > parseFloat(dxy.open) ? 'STRENGTHENING' : 'WEAKENING'
      };
    } catch (error) {
      console.error('DXY data collection failed:', error);
      return { currentLevel: 103, trend: 'UNKNOWN', error: 'Data unavailable' };
    }
  }
  
  extractOptionStrikes(optionChain, currentPrice) {
    try {
      if (!optionChain || optionChain.length === 0) {
        return null;
      }
      
      // Find 90 DTE expiration (closest to 90 days)
      const target90DTE = optionChain.find(exp => 
        Math.abs(exp.dte - 90) <= 7
      ) || optionChain[0];
      
      if (!target90DTE || !target90DTE.strikes) {
        return null;
      }
      
      // Find strikes closest to 5-delta (approximately 16-delta for normal distribution)
      const atmStrike = target90DTE.strikes.find(s => 
        Math.abs(s.strike - currentPrice) < 50
      );
      
      const call5Delta = target90DTE.strikes.find(s => 
        s.call.delta > 0 && s.call.delta <= 0.10 && s.strike > currentPrice
      );
      
      const put5Delta = target90DTE.strikes.find(s => 
        s.put.delta < 0 && s.put.delta >= -0.10 && s.strike < currentPrice
      );
      
      return {
        expiration: target90DTE.date,
        dte: target90DTE.dte,
        atmStrike: atmStrike?.strike || currentPrice,
        call90DTE: call5Delta ? {
          strike: call5Delta.strike,
          bid: call5Delta.call.bid,
          ask: call5Delta.call.ask,
          delta: call5Delta.call.delta,
          iv: call5Delta.call.iv
        } : null,
        put90DTE: put5Delta ? {
          strike: put5Delta.strike,
          bid: put5Delta.put.bid,
          ask: put5Delta.put.ask,
          delta: put5Delta.put.delta,
          iv: put5Delta.put.iv
        } : null
      };
    } catch (error) {
      console.error('Strike extraction error:', error);
      return null;
    }
  }
  
  getVIXRegime(vixLevel) {
    if (vixLevel < 12) return 'EXTREMELY_LOW';
    if (vixLevel < 16) return 'LOW';
    if (vixLevel < 20) return 'NORMAL';
    if (vixLevel < 25) return 'ELEVATED';
    if (vixLevel < 30) return 'HIGH';
    return 'EXTREME';
  }
  
  async getPhaseSpecificTickers() {
    // This would be expanded based on account phase
    // For now, return basic additional tickers
    const tickers = {};
    
    try {
      // Add MCL and MGC (common Phase 1-2 tickers)
      const additionalQuotes = await this.api.getQuotes(['MCL', 'MGC']);
      
      additionalQuotes.data.items.forEach(item => {
        const ticker = item.symbol.replace('/', '');
        tickers[ticker] = {
          currentPrice: parseFloat(item.last),
          dayChange: parseFloat(item.last) - parseFloat(item.open),
          iv: parseFloat(item['implied-volatility'] || 0),
          ivRank: parseFloat(item['iv-rank'] || 0)
        };
      });
    } catch (error) {
      console.warn('Additional tickers collection failed:', error);
    }
    
    return tickers;
  }
  
  getDefaultESData() {
    return {
      currentPrice: 5400,
      openPrice: 5395,
      previousClose: 5390,
      error: 'Using default data - API unavailable',
      strikes: null
    };
  }
  
  async getMarketStatus() {
    try {
      const now = new Date();
      const nyTime = new Date(now.toLocaleString("en-US", {timeZone: "America/New_York"}));
      const hour = nyTime.getHours();
      const day = nyTime.getDay();
      
      // Weekend
      if (day === 0 || day === 6) return 'CLOSED_WEEKEND';
      
      // Market hours (9:30 AM - 4:00 PM ET)
      if (hour >= 9 && hour < 16) {
        if (hour === 9 && nyTime.getMinutes() < 30) return 'PRE_MARKET';
        return 'OPEN';
      }
      
      // Pre-market (4:00 AM - 9:30 AM ET)
      if (hour >= 4 && hour < 9) return 'PRE_MARKET';
      if (hour === 9 && nyTime.getMinutes() < 30) return 'PRE_MARKET';
      
      // After-hours (4:00 PM - 8:00 PM ET)
      if (hour >= 16 && hour < 20) return 'AFTER_HOURS';
      
      return 'CLOSED';
    } catch (error) {
      return 'UNKNOWN';
    }
  }
}
```

## ORDER BUILDER (PREPARATION ONLY)

**IMPORTANT: Orders are prepared but NOT automatically submitted for safety**

```javascript
class OrderBuilder {
  constructor(api) {
    this.api = api;
    this.orders = [];
  }
  
  // Prepare strangle order (90 DTE)
  prepareStrangleOrder(ticker, putStrike, callStrike, expiration, contracts = 1) {
    const order = {
      orderType: 'STRANGLE',
      ticker,
      expiration,
      contracts,
      legs: [
        {
          action: 'SELL_TO_OPEN',
          instrument: 'PUT',
          strike: putStrike,
          quantity: contracts
        },
        {
          action: 'SELL_TO_OPEN', 
          instrument: 'CALL',
          strike: callStrike,
          quantity: contracts
        }
      ],
      orderClass: 'SPREAD',
      priceType: 'NET_CREDIT',
      timeInForce: 'DAY',
      status: 'PREPARED_NOT_SUBMITTED'
    };
    
    this.orders.push(order);
    console.log(`üìã Strangle order prepared: ${ticker} ${putStrike}P/${callStrike}C`);
    return order;
  }
  
  // Prepare 0DTE spread order
  prepare0DTEOrder(ticker, spreadType, shortStrike, longStrike, contracts = 1) {
    const order = {
      orderType: '0DTE_SPREAD',
      ticker,
      spreadType, // 'CALL_SPREAD' or 'PUT_SPREAD'
      contracts,
      expiration: new Date().toISOString().split('T')[0], // Today
      legs: [
        {
          action: 'SELL_TO_OPEN',
          instrument: spreadType === 'CALL_SPREAD' ? 'CALL' : 'PUT',
          strike: shortStrike,
          quantity: contracts
        },
        {
          action: 'BUY_TO_OPEN',
          instrument: spreadType === 'CALL_SPREAD' ? 'CALL' : 'PUT', 
          strike: longStrike,
          quantity: contracts
        }
      ],
      orderClass: 'SPREAD',
      priceType: 'NET_CREDIT',
      timeInForce: 'DAY',
      status: 'PREPARED_NOT_SUBMITTED',
      warning: '‚ö†Ô∏è 0DTE ORDER - Review carefully before submission'
    };
    
    this.orders.push(order);
    console.log(`üìã 0DTE ${spreadType} prepared: ${shortStrike}/${longStrike}`);
    return order;
  }
  
  // Prepare LT112 order (112 DTE iron condor)
  prepareLT112Order(ticker, putShort, putLong, callShort, callLong, contracts = 1) {
    const order = {
      orderType: 'LT112_IRON_CONDOR',
      ticker,
      contracts,
      expiration: formatExpiration(get90DTEExpiration()), // Approximately 90-112 DTE
      legs: [
        { action: 'SELL_TO_OPEN', instrument: 'PUT', strike: putShort, quantity: contracts },
        { action: 'BUY_TO_OPEN', instrument: 'PUT', strike: putLong, quantity: contracts },
        { action: 'SELL_TO_OPEN', instrument: 'CALL', strike: callShort, quantity: contracts },
        { action: 'BUY_TO_OPEN', instrument: 'CALL', strike: callLong, quantity: contracts }
      ],
      orderClass: 'IRON_CONDOR',
      priceType: 'NET_CREDIT',
      timeInForce: 'DAY', 
      status: 'PREPARED_NOT_SUBMITTED'
    };
    
    this.orders.push(order);
    console.log(`üìã LT112 Iron Condor prepared: ${ticker}`);
    return order;
  }
  
  // Get all prepared orders
  getPreparedOrders() {
    return this.orders.filter(order => order.status === 'PREPARED_NOT_SUBMITTED');
  }
  
  // Clear prepared orders
  clearPreparedOrders() {
    this.orders = [];
    console.log('üóëÔ∏è Prepared orders cleared');
  }
  
  // Convert order to TastyTrade API format (for manual submission)
  convertToAPIFormat(order) {
    const apiOrder = {
      'order-type': 'Spread',
      'time-in-force': order.timeInForce,
      'price-type': order.priceType,
      legs: order.legs.map(leg => ({
        action: leg.action.toLowerCase().replace('_', '-'),
        'instrument-type': 'Equity Option',
        symbol: `${order.ticker}  ${order.expiration.replace(/-/g, '')}${leg.instrument[0]}${String(leg.strike).padStart(8, '0')}000`,
        quantity: leg.quantity
      }))
    };
    
    return apiOrder;
  }
}
```

## WEBSOCKET STREAMING

Real-time data streaming capabilities.

```javascript
class DXLinkStreamer {
  constructor(api) {
    this.api = api;
    this.connection = null;
    this.subscriptions = new Set();
    this.handlers = new Map();
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
  }
  
  async connect() {
    try {
      const quoteToken = await this.api.getQuoteToken();
      const wsUrl = `${quoteToken.url}?token=${quoteToken.token}`;
      
      this.connection = new WebSocket(wsUrl);
      
      this.connection.onopen = () => {
        console.log('‚úÖ DXLink WebSocket connected');
        this.reconnectAttempts = 0;
      };
      
      this.connection.onmessage = (event) => {
        this.handleMessage(event.data);
      };
      
      this.connection.onerror = (error) => {
        console.error('üö® WebSocket error:', error);
      };
      
      this.connection.onclose = () => {
        console.log('üì° WebSocket connection closed');
        this.handleReconnect();
      };
      
      return true;
    } catch (error) {
      console.error('WebSocket connection failed:', error);
      return false;
    }
  }
  
  handleMessage(data) {
    try {
      const message = JSON.parse(data);
      
      if (message.type === 'Quote') {
        this.handleQuoteUpdate(message);
      } else if (message.type === 'Trade') {
        this.handleTradeUpdate(message);
      }
    } catch (error) {
      console.error('Message handling error:', error);
    }
  }
  
  handleQuoteUpdate(quote) {
    const symbol = quote.eventSymbol;
    
    if (this.handlers.has(symbol)) {
      this.handlers.get(symbol)(quote);
    }
  }
  
  handleTradeUpdate(trade) {
    const symbol = trade.eventSymbol;
    
    if (this.handlers.has(symbol)) {
      this.handlers.get(symbol)(trade);
    }
  }
  
  subscribe(symbol, handler) {
    this.subscriptions.add(symbol);
    this.handlers.set(symbol, handler);
    
    if (this.connection && this.connection.readyState === WebSocket.OPEN) {
      this.sendSubscription(symbol);
    }
  }
  
  sendSubscription(symbol) {
    const subscription = {
      type: 'SUBSCRIPTION',
      channel: 0,
      service: 'FEED',
      command: 'SUBSCRIBE',
      parameters: {
        symbols: [symbol],
        types: ['Quote', 'Trade']
      }
    };
    
    this.connection.send(JSON.stringify(subscription));
    console.log(`üì° Subscribed to ${symbol}`);
  }
  
  handleReconnect() {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      const delay = Math.pow(2, this.reconnectAttempts) * 1000; // Exponential backoff
      
      console.log(`üîÑ Reconnecting in ${delay/1000} seconds... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
      
      setTimeout(() => {
        this.connect();
      }, delay);
    } else {
      console.error('üö® Max reconnection attempts reached');
    }
  }
  
  disconnect() {
    if (this.connection) {
      this.connection.close();
      this.connection = null;
      console.log('üì° WebSocket disconnected');
    }
  }
}
```

## API TESTING FUNCTIONS

```javascript
async function testAPIConnection() {
  console.log('üß™ Testing API connection with stored credentials...');
  
  try {
    const api = new TastyTradeAPI(
      API_CREDENTIALS.CLIENT_SECRET,
      API_CREDENTIALS.REFRESH_TOKEN,
      'production'
    );
    
    console.log('‚è≥ Initializing API connection...');
    await api.initialize();
    
    console.log('üìä Testing market data collection...');
    const searchedData = await api.buildSearchedData();
    
    console.log('üí∞ Testing account status...');
    const accountStatus = await api.getAccountStatus();
    
    console.log('\n‚úÖ API test completed successfully!');
    console.log(`Account: ¬£${accountStatus.netLiq.toLocaleString()}`);
    console.log(`BP Usage: ${accountStatus.bpUsedPercent}%`);
    console.log(`Positions: ${accountStatus.positions}`);
    
    return { success: true, api, searchedData, accountStatus };
    
  } catch (error) {
    console.error('‚ùå API test failed:', error);
    
    if (error.message === 'API_FALLBACK_TO_MANUAL') {
      console.log('üîÑ Falling back to manual mode - load SEARCH_PARSING.txt');
    }
    
    return { success: false, error: error.message };
  }
}

function validateAPIIntegration() {
  const tests = [
    { name: 'TokenManager creation', fn: () => new TokenManager('test', 'test') },
    { name: 'APIFailureHandler creation', fn: () => new APIFailureHandler() },
    { name: 'TastyTradeAPI creation', fn: () => new TastyTradeAPI('test', 'test') },
    { name: 'Symbol utilities', fn: () => getNextFriday() },
    { name: 'Date calculations', fn: () => calculateDTE('2024-12-31') >= 0 }
  ];
  
  console.log('üß™ API_INTEGRATION.txt Validation:');
  tests.forEach(test => {
    try {
      const result = test.fn();
      console.log(`${result ? '‚úÖ' : '‚ùå'} ${test.name}`);
    } catch (error) {
      console.log(`‚ùå ${test.name}: ${error.message}`);
    }
  });
  
  return tests.every(test => {
    try { return !!test.fn(); } catch { return false; }
  });
}

// Auto-initialize if API credentials are provided in user input
if (typeof userInput !== 'undefined' && userInput.includes('Mode: API')) {
  console.log('üîå API Mode detected in user input');
  console.log('üöÄ Initializing TastyTrade API integration...');
  
  // Extract credentials from user input
  const lines = userInput.split('\n');
  const clientSecret = lines.find(l => l.includes('Client Secret:'))?.split(':')[1]?.trim();
  const refreshToken = lines.find(l => l.includes('Refresh Token:'))?.split(':')[1]?.trim();
  const environment = lines.find(l => l.includes('Environment:'))?.split(':')[1]?.trim() || 'production';
  
  if (clientSecret && refreshToken) {
    console.log('‚úÖ API credentials found in input');
    
    // Initialize API and set global variables
    window.apiMode = true;
    window.tastyTradeAPI = new TastyTradeAPI(clientSecret, refreshToken, environment);
    
    // Auto-execute API initialization
    (async () => {
      try {
        await window.tastyTradeAPI.initialize();
        const accountStatus = await window.tastyTradeAPI.getAccountStatus();
        const searchedData = await window.tastyTradeAPI.buildSearchedData();
        
        // Set global variables for CORE_FRAMEWORK.txt
        window.apiData = accountStatus;
        window.searchedData = searchedData;
        
        console.log('‚úÖ API initialization complete - ready for framework execution');
        
        // Trigger framework execution if CORE_FRAMEWORK.txt is loaded
        if (typeof executeFramework === 'function') {
          const results = executeFramework(userInput, searchedData);
          console.log('üìä Framework execution complete with API data');
        }
        
      } catch (error) {
        console.error('üö® API initialization failed:', error);
        console.log('üîÑ Falling back to manual mode - please use SEARCH_PARSING.txt');
        window.apiMode = false;
      }
    })();
  } else {
    console.log('‚ùå API credentials not found in input');
    console.log('üìù Please provide Client Secret and Refresh Token');
  }
} else {
  console.log('üìã API_INTEGRATION.txt MODULE LOADED');
  console.log('üîå Ready for API mode when credentials are provided');
  console.log('üîó Integration point: Provides buildSearchedData() for CORE_FRAMEWORK.txt');
  
  // Run validation
  validateAPIIntegration();
}
```

## INTEGRATION POINTS WITH OTHER MODULES

### Called by CORE_FRAMEWORK.txt:
- `new TastyTradeAPI().buildSearchedData()` - Main data collection function
- `api.getAccountStatus()` - Account information for framework input
- `api.formatPositionsForFramework()` - Position formatting

### Calls to other modules:
- Falls back to SEARCH_PARSING.txt when API fails
- Provides data to HTML_DASHBOARD.txt for visualization
- Integrates with ADVANCED_STRATEGIES.txt for order preparation

### Error Handling:
- Automatic fallback to manual mode on API failures
- Graceful degradation with cached data
- Progressive retry with exponential backoff

---

**STATUS: API_INTEGRATION.txt COMPLETE - 950 lines**  
**FEATURES: Complete TastyTrade API integration with authentication, market data collection, error handling, WebSocket streaming, order preparation, and automatic fallback to manual mode**