# TOM KING TRADING FRAMEWORK v17 - SEARCH PARSING MODULE

## MODULE OVERVIEW

This module provides comprehensive instructions for manually parsing web search results to build the `searchedData` structure required by CORE_FRAMEWORK.txt. It serves as the fallback when API_INTEGRATION.txt is unavailable and provides the Progressive Friday Pre-Market Analysis system.

**Key Features:**
- Complete search result parsing patterns for all market data
- Progressive Friday pre-market analysis (3 phases)
- Integration examples with BP requirements
- Fallback data structure building when APIs fail
- Support for all Phase 1-4 ticker requirements

**Integration with CORE_FRAMEWORK.txt:**
- Builds the exact `searchedData` structure expected by pattern analysis
- Provides manual data collection when API_INTEGRATION.txt fails
- Supports all qualified tickers by phase from PDF Pages 13-24

## MANDATORY SEARCH REQUIREMENTS

### Core Market Searches (ALWAYS REQUIRED):

**These searches are MANDATORY - NO EXCEPTIONS:**

1. **Current Time Search:**
   ```
   Search: "current time EST and UK time"
   Extract: Current EST time, UK time, day of week
   ```

2. **ES Futures Data:**
   ```
   Search: "ES futures current price opening price 5-day high low 20-day range ATR"
   Extract: All price levels, ranges, volatility measures
   ```

3. **SPY ETF Data:**
   ```
   Search: "SPY current price support resistance RSI 8 EMA 21 EMA"
   Extract: Price, technical indicators, moving averages
   ```

4. **VIX Volatility:**
   ```
   Search: "VIX current level 20-day average regime"
   Extract: Current VIX, historical context, regime assessment
   ```

5. **Dollar Index:**
   ```
   Search: "DXY dollar index level trend"
   Extract: USD strength/weakness trend
   ```

### Phase-Based Ticker Searches

Based on account value phase (See PDF Pages 13-24):

**Phase 1 (£30-40k): MCL, MGC, GLD, TLT**
**Phase 2 (£40-60k): Add MES, MNQ, SLV, XOP, 6A, M6E**  
**Phase 3 (£60-75k): Add ES, CL, GC, LE, HE, ZC, ZS, ZW, 6E, 6B**
**Phase 4 (£75k+): All products available**

FOR EACH QUALIFIED TICKER (if not at concentration limit):
```
Search: "[TICKER] current price 20-day high low"
Search: "[TICKER] IV rank IV percentile ATR"  
Search: "[TICKER] 90 DTE 5 delta put strike bid"
Search: "[TICKER] 90 DTE 5 delta call strike bid"
```

## HOW TO PARSE SEARCH RESULTS (CRITICAL SECTION)

### Price Data Parsing:

**Pattern Recognition Examples:**

```
Search result: "ES is currently trading at $6,468.50, up $48.50 from the open"
Extract:
- currentPrice: 6468.50  // Extract number after "trading at $"
- dayChange: 48.50       // Extract number after "up $" or "down $"
- openPrice: 6468.50 - 48.50 = 6420.00  // Calculate from current and change
```

```
Search result: "ES opened at 6420, previous close was 6415"
Extract:
- openPrice: 6420        // Number after "opened at"
- previousClose: 6415    // Number after "previous close" or "close"
```

**Alternative Formats:**
```
"ES 6468.50 +48.50 (+0.75%)"
"/ES December 2024: 6468.5 ↑48.5"
"E-mini S&P 500: $6,468.50 (48.50, 0.75%)"
```

### Range Data Parsing:

```
Search result: "5-day range: 6380 - 6485"
Extract:
- high5d: 6485          // Number after dash
- low5d: 6380           // Number before dash
```

```
Search result: "20-day high: 6512, 20-day low: 6245"
Extract:
- high20d: 6512         // Number after "high:"
- low20d: 6245          // Number after "low:"
```

**Alternative Formats:**
```
"Range (5d): 6380-6485"
"High/Low 20d: 6512/6245"
"20-day range: 6245 to 6512"
```

### Technical Indicators Parsing:

```
Search result: "ATR(14) is 45 points"
Extract:
- atr: 45               // Extract number before "points"
```

```
Search result: "RSI reading: 58.3 (neutral)"
Extract:
- rsi: 58               // Round to integer, ignore descriptors
```

```
Search result: "8-day EMA: 6455, 21-day EMA: 6448"
Extract:
- ema8: 6455            // Number after "8-day EMA:" or "8 EMA:"
- ema21: 6448           // Number after "21-day EMA:" or "21 EMA:"
```

**Alternative Formats:**
```
"ATR: 45.2 pts"
"RSI-14: 58.3"
"EMA8: 6455, EMA21: 6448"
"Moving averages: 8d=6455, 21d=6448"
```

### Volatility Data Parsing:

```
Search result: "Implied Volatility: 15.2%"
Extract:
- iv: 15.2             // Number before "%"
```

```
Search result: "IV Rank: 35th percentile"
Extract:
- ivRank: 35           // Number before "th" or "%"
```

```
Search result: "IV percentile: 42%"
Extract:
- ivPercentile: 42     // Number before "%"
```

**Alternative Formats:**
```
"ImpliedVol: 15.2"
"IV rank 35/100"
"Volatility rank: 35th %ile"
```

### Option Chain Parsing:

```
Search result: "90 DTE 5-delta put: 6200 strike, bid 2.50, ask 2.75"
Extract:
- put90DTE: {
    strike: 6200,      // Number before "strike"
    bid: 2.50,         // Number after "bid"
    ask: 2.75,         // Number after "ask"
    delta: -0.05       // Approximately 5-delta put
  }
```

```
Search result: "90 DTE call options: 6700 strike, delta 0.06, bid 3.25"
Extract:
- call90DTE: {
    strike: 6700,      // Number before "strike"
    bid: 3.25,         // Number after "bid"
    delta: 0.06        // Number after "delta"
  }
```

**Credit Calculations:**
```
For spread credits: Credit = Short Bid - Long Ask
Example: Short 6450 bid 4.25, Long 6480 ask 1.75
Spread credit = 4.25 - 1.75 = 2.50
```

**Alternative Formats:**
```
"6200P90: bid/ask 2.50/2.75, delta -0.05"
"90d puts: 6200 strike @2.50 bid"
"Call 6700 (90 DTE): 3.25 bid, delta 6%"
```

## PROGRESSIVE FRIDAY PRE-MARKET ANALYSIS

This progressive analysis is CRITICAL for successful 0DTE execution on Fridays.

### PHASE 1: 9:00-9:30 AM EST - OVERNIGHT ASSESSMENT

**Purpose:** Understand overnight market dynamics and positioning

**MANDATORY SEARCHES:**

1. **Overnight Range Analysis:**
   ```
   Search: "ES overnight high low current from yesterday close"
   Extract: 
   - overnightHigh: [number]
   - overnightLow: [number] 
   - currentVsClose: [percentage]
   ```

2. **Globex Volume:**
   ```
   Search: "ES Globex volume overnight session total contracts"
   Extract:
   - overnightVolume: [number]
   - volumeVsAverage: [comparison]
   ```

3. **Economic Calendar:**
   ```
   Search: "Economic calendar today Fed speakers data releases times"
   Extract:
   - todayEvents: [list of events]
   - keyTimes: [times EST]
   - volatilityRisk: [high/medium/low]
   ```

4. **Overnight News:**
   ```
   Search: "Major overnight news Europe Asia market moves"
   Extract:
   - globalContext: [summary]
   - riskEvents: [any major items]
   ```

5. **Dollar Movement:**
   ```
   Search: "Dollar index overnight movement trend"
   Extract:
   - usdTrend: [strengthening/weakening]
   - usdImpact: [description]
   ```

**PHASE 1 CALCULATIONS:**
```javascript
const phase1Analysis = {
  overnightRange: overnightHigh - overnightLow,
  overnightRangePercent: ((overnightHigh - overnightLow) / yesterdayClose) * 100,
  distanceFromClose: ((currentPrice - yesterdayClose) / yesterdayClose) * 100,
  initialBias: currentPrice > yesterdayClose ? 'BULLISH' : 
               currentPrice < yesterdayClose ? 'BEARISH' : 'NEUTRAL',
  volumeSignal: overnightVolume > averageVolume ? 'HIGH' : 'NORMAL',
  riskLevel: economicEvents.length > 2 ? 'HIGH' : 'NORMAL'
};
```

### PHASE 2: 9:30-10:00 AM EST - OPENING RANGE DEVELOPMENT

**Purpose:** Identify early market structure and momentum

**MANDATORY SEARCHES:**

1. **Opening Range:**
   ```
   Search: "ES opening range first 30 minutes high low volume"
   Extract:
   - openingHigh: [number]
   - openingLow: [number]
   - opening30MinVolume: [number]
   ```

2. **SPY Correlation:**
   ```
   Search: "SPY opening price 30-minute range VWAP deviation"
   Extract:
   - spyVWAPDeviation: [percentage]
   - correlation: [strong/weak]
   ```

3. **Order Flow:**
   ```
   Search: "ES order flow imbalance buying selling pressure delta"
   Extract:
   - orderFlowDelta: [positive/negative]
   - buyingPressure: [strong/weak]
   ```

4. **VIX Movement:**
   ```
   Search: "VIX opening level change from yesterday"
   Extract:
   - vixChange: [number]
   - vixDirection: [rising/falling]
   ```

5. **Sector Rotation:**
   ```
   Search: "Major sector rotation technology financials energy"
   Extract:
   - leadingSectors: [list]
   - rotation: [into/outof risk]
   ```

**PHASE 2 CALCULATIONS:**
```javascript
const phase2Analysis = {
  openingRangeWidth: openingHigh - openingLow,
  openingRangeVs10Day: (openingRangeWidth / average10DayRange) * 100,
  vwapMagnet: Math.abs(currentPrice - vwap) / atr,
  momentumReading: orderFlowDelta > 0 ? 'BULLISH' : 'BEARISH',
  volatilityExpansion: vixChange > 0.5 ? 'EXPANDING' : 'CONTRACTING'
};
```

### PHASE 3: 10:00-10:30 AM EST - FINAL 0DTE PREPARATION

**Purpose:** Lock in exact entry triggers and position sizing

**MANDATORY SEARCHES:**

1. **Current Position:**
   ```
   Search: "ES current position from open percentage move trend"
   Extract:
   - percentFromOpen: [number]
   - trendStrength: [strong/weak]
   ```

2. **0DTE Option Chain:**
   ```
   Search: "ES 0DTE option chain ATM 30-point spreads current bid ask"
   Extract:
   - atmStrike: [number]
   - callSpreadCredit: [number]
   - putSpreadCredit: [number]
   ```

3. **Gamma Levels:**
   ```
   Search: "ES gamma exposure levels max pain pinning levels"
   Extract:
   - gammaLevels: [array of strikes]
   - maxPain: [strike level]
   ```

4. **Implied Move:**
   ```
   Search: "0DTE implied move expected range probability"
   Extract:
   - impliedMove: [points]
   - probability68: [range]
   ```

5. **Market Internals:**
   ```
   Search: "Current market internals ADD VOLD TICK readings"
   Extract:
   - advanceDecline: [number]
   - tickReading: [number]
   - breadth: [strong/weak]
   ```

**FINAL 0DTE CALCULATIONS:**
```javascript
const phase3Analysis = {
  // Tom King 0DTE Rules: ±0.5% triggers from open
  callTrigger: openPrice * 1.005,    // +0.5% from open
  putTrigger: openPrice * 0.995,     // -0.5% from open
  
  ironCondorZone: {
    upper: openPrice * 1.005,
    lower: openPrice * 0.995,
    width: openPrice * 0.01  // 1% wide zone
  },
  
  recommendedSide: percentFromOpen > 0.3 ? 'CALL_SPREAD' :
                   percentFromOpen < -0.3 ? 'PUT_SPREAD' : 'IRON_CONDOR',
  
  positionSize: calculatePositionSize(accountValue, phase, impliedMove),
  
  expectedCredit: recommendedSide === 'IRON_CONDOR' ? 
                  callSpreadCredit + putSpreadCredit : 
                  Math.max(callSpreadCredit, putSpreadCredit)
};
```

## COMPLETE INTEGRATION EXAMPLE

This example demonstrates FULL framework execution for a Phase 2 account.

### SCENARIO: £40,000 Account on Friday, January 12, 2024 at 10:15 AM EST

**Step 1: Determine Phase & Available Strategies**
```javascript
const accountValue = 40000;
const phase = 2; // £40-60k range
const availableStrategies = {
  '0DTE': { max: 2, current: 0, available: 2 },
  'LT112': { max: 4, current: 0, available: 4 }, // MES positions
  'IPMCC': { max: 2, current: 0, available: 2 },
  'STRANGLE': { max: 3, current: 0, available: 3 },
  'RATIO': { max: 2, current: 0, available: 2 }
};
```

**Step 2: Execute Phase-Specific Searches**

**CORE SEARCHES (All Phases):**
```
✓ Search: "current time EST and UK time"
  Result: "10:15 AM EST, 3:15 PM UK"
  Extract: { currentEST: "10:15 AM", currentUK: "3:15 PM" }

✓ Search: "ES futures current price opening price 5-day high low"
  Result: "ES at 5421.50, opened 5410, 5-day: 5380-5485"
  Extract: { currentPrice: 5421.50, openPrice: 5410, high5d: 5485, low5d: 5380 }

✓ Search: "VIX current level 20-day average"
  Result: "VIX 15.2, 20-day avg 16.8"
  Extract: { currentLevel: 15.2, avg20d: 16.8, regime: "NORMAL" }
```

**PHASE 2 TICKER SEARCHES:**
```
✓ Search: "MES current price IV rank"
  Result: "MES 5421.50, IV rank 35th percentile"
  Extract: { currentPrice: 5421.50, ivRank: 35 }

✓ Search: "MCL crude oil current price 90 DTE options"
  Result: "MCL 72.45, 90 DTE: 68 put 0.85 bid, 77 call 0.80 bid"
  Extract: { 
    currentPrice: 72.45,
    put90DTE: { strike: 68, bid: 0.85 },
    call90DTE: { strike: 77, bid: 0.80 }
  }

✓ Search: "MGC gold current price volatility"
  Result: "MGC 2045, IV 12.5%"
  Extract: { currentPrice: 2045, iv: 12.5 }
```

**Step 3: Build SearchedData Structure**

```javascript
const searchedData = {
  ES: {
    currentPrice: 5421.50,
    openPrice: 5410,
    previousClose: 5405,
    high5d: 5485,
    low5d: 5380,
    high20d: 5520,
    low20d: 5300,
    atr: 45,
    rsi: 52,
    ema8: 5415,
    ema21: 5400,
    iv: 14.8,
    ivRank: 32,
    strikes: {
      call90DTE: { strike: 5650, bid: 12.50, delta: 0.06 },
      put90DTE: { strike: 5200, bid: 11.75, delta: -0.05 }
    }
  },
  MES: {
    currentPrice: 5421.50,
    ivRank: 35,
    strikes: {
      call90DTE: { strike: 5650, bid: 12.50, delta: 0.06 },
      put90DTE: { strike: 5200, bid: 11.75, delta: -0.05 }
    }
  },
  MCL: {
    currentPrice: 72.45,
    strikes: {
      put90DTE: { strike: 68, bid: 0.85, delta: -0.05 },
      call90DTE: { strike: 77, bid: 0.80, delta: 0.06 }
    }
  },
  MGC: {
    currentPrice: 2045,
    iv: 12.5
  },
  VIX: {
    currentLevel: 15.2,
    avg20d: 16.8,
    regime: "NORMAL"
  },
  TIME: {
    currentEST: "10:15 AM",
    currentUK: "3:15 PM",
    marketStatus: "OPEN"
  }
};
```

**Step 4: Pattern Analysis Results**
```javascript
const patterns = {
  excellent: [
    { ticker: 'MES', quality: 'EXCELLENT', score: 85, reason: 'Above 8 EMA, RSI 52, good IV' }
  ],
  good: [
    { ticker: 'MCL', quality: 'GOOD', score: 72, reason: 'Acceptable IV rank, stable range' },
    { ticker: 'MGC', quality: 'GOOD', score: 68, reason: 'Low IV but stable trend' }
  ],
  poor: [],
  noData: []
};
```

**Step 5: Position Allocation Table**

```
+---------------------------------------------------------------+
|      POSITION ALLOCATION & BP OPTIMIZATION TABLE              |
|              Phase 2: £40,000 Account                         |
+---------------------------------------------------------------+

Strategy    | Max Pos | Current | Avail | BP/Pos | BP Used | Can Add | Priority
------------|---------|---------|-------|--------|---------|---------|----------
LT112 (MES) | 4       | 0       | 4     | 3%     | 0%      | 12%     | HIGH
STRANGLE    | 3       | 0       | 3     | 2.5%   | 0%      | 7.5%    | HIGH
0DTE        | 2       | 0       | 2     | 2%     | 0%      | WAIT    | FRIDAY
IPMCC       | 2       | 0       | 2     | 8%     | 0%      | 16%     | MEDIUM
RATIO       | 2       | 0       | 2     | 2%     | 0%      | 4%      | LOW
------------|---------|---------|-------|--------|---------|---------|----------
TOTAL       | -       | -       | -     | -      | 0%      | 39.5%   | -

VIX REGIME (15.2): NORMAL - Target 55-65% BP usage
Current: 0% | Gap to Min: 55% | Available: £40,000
```

**Step 6: BP Optimization Plan**

```
PHASE 2 OPTIMIZATION PLAN TO REACH 55% BP:
1. IMMEDIATE: Enter 2 MES LT112 positions (6% BP)
2. IMMEDIATE: Enter MCL & MGC strangles (5% BP) 
3. AT 10:30 AM: Execute 1 ES 0DTE spread (2% BP)
4. NEXT WEEK: Add IPMCC on QQQ (8% BP)
5. ADDITIONAL: Add 1 more strangle position (2.5% BP)
Final BP after additions: 23.5% - need 31.5% more for minimum target
```

**Step 7: Specific Trade Recommendations**

```
📊 RECOMMENDATIONS WITH EXACT STRIKES:
1. MES LT112 #1: Buy 5350/5500 strangle for £135 (3% BP)
2. MES LT112 #2: Buy 5375/5525 strangle for £140 (3% BP) 
3. MCL Strangle: Sell 68P/77C for £1.65 credit (2.5% BP)
4. MGC Strangle: Sell 2000P/2090C for £1.45 credit (2.5% BP)
5. [10:30 AM] ES 0DTE: Based on market position (2% BP)

TOTAL BP AFTER EXECUTION: 13%
REMAINING TO TARGET: 42%
```

## BP REQUIREMENTS TABLE (PDF PAGES 5-6, 13-24)

Complete buying power requirements for all strategies by phase:

| Strategy | Micro BP | Full BP | Phase 1 Max | Phase 2 Max | Phase 3 Max | Phase 4 Max |
|----------|----------|---------|-------------|-------------|-------------|-------------|
| STRANGLE | 2.5% | 3.5% | 1 position | 3 positions | 4 positions | 5 positions |
| LT112 | 3% (MES) | 6% (ES) | 0 positions | 4 positions | 1 position | 3 positions |
| IPMCC | 8% | 8% | 1 position | 2 positions | 3 positions | 4 positions |
| 0DTE | 2% | 2% | 1 position | 2 positions | 3 positions | 4 positions |
| BUTTERFLY | 0.5% | 0.5% | 0 positions | 0 positions | 2 positions | 4 positions |
| RATIO | 2% | 2% | 0 positions | 2 positions | 4 positions | 5 positions |
| DIAGONAL | 1.5% | 1.5% | 0 positions | 0 positions | 2 positions | 4 positions |
| LEAP | 2% | 2% | 0 positions | 2 positions | 3 positions | 10 positions |
| BOX | 0% | 0% | 0 positions | 0 positions | 1 position | 2 positions |

## SEARCH PARSING FUNCTIONS FOR CORE_FRAMEWORK.txt

```javascript
// SEARCH RESULT PARSING UTILITIES
function parseSearchResults(searchResults) {
  const searchedData = {
    timestamp: new Date().toISOString(),
    source: 'Manual_Search_Parsing'
  };
  
  // Parse each search result into structured data
  searchResults.forEach(result => {
    const parsed = parseIndividualResult(result);
    if (parsed.ticker) {
      searchedData[parsed.ticker] = {
        ...searchedData[parsed.ticker],
        ...parsed.data
      };
    }
  });
  
  return searchedData;
}

function parseIndividualResult(searchResult) {
  const result = { ticker: null, data: {} };
  
  // Detect ticker from search result
  const tickerMatch = searchResult.match(/\b(ES|SPY|VIX|DXY|MCL|MGC|MES|MNQ|GLD|TLT|SLV|XOP|6A|M6E|CL|GC|LE|HE|ZC|ZS|ZW|6E|6B|ZB|ZN)\b/i);
  if (!tickerMatch) return result;
  
  result.ticker = tickerMatch[1].toUpperCase();
  
  // Price extraction patterns
  const pricePatterns = [
    /(?:trading at|price|current|at)\s*\$?([0-9,]+\.?[0-9]*)/i,
    /([0-9,]+\.?[0-9]*)\s*(?:up|down|\+|\-)/i
  ];
  
  pricePatterns.forEach(pattern => {
    const match = searchResult.match(pattern);
    if (match && !result.data.currentPrice) {
      result.data.currentPrice = parseFloat(match[1].replace(/,/g, ''));
    }
  });
  
  // Range extraction
  const rangeMatch = searchResult.match(/(\d+)\s*-\s*(\d+)/);
  if (rangeMatch) {
    result.data.low5d = parseFloat(rangeMatch[1]);
    result.data.high5d = parseFloat(rangeMatch[2]);
  }
  
  // Technical indicators
  const atrMatch = searchResult.match(/ATR[^0-9]*([0-9.]+)/i);
  if (atrMatch) {
    result.data.atr = parseFloat(atrMatch[1]);
  }
  
  const rsiMatch = searchResult.match(/RSI[^0-9]*([0-9.]+)/i);
  if (rsiMatch) {
    result.data.rsi = Math.round(parseFloat(rsiMatch[1]));
  }
  
  // IV data
  const ivMatch = searchResult.match(/(?:implied volatility|IV)[^0-9]*([0-9.]+)%?/i);
  if (ivMatch) {
    result.data.iv = parseFloat(ivMatch[1]);
  }
  
  const ivRankMatch = searchResult.match(/(?:IV rank|rank)[^0-9]*([0-9]+)/i);
  if (ivRankMatch) {
    result.data.ivRank = parseInt(ivRankMatch[1]);
  }
  
  // Option strikes
  const putStrikeMatch = searchResult.match(/(\d+)\s*(?:put|P).*?bid\s*([0-9.]+)/i);
  if (putStrikeMatch) {
    result.data.strikes = result.data.strikes || {};
    result.data.strikes.put90DTE = {
      strike: parseFloat(putStrikeMatch[1]),
      bid: parseFloat(putStrikeMatch[2]),
      delta: -0.05 // Approximate 5-delta
    };
  }
  
  const callStrikeMatch = searchResult.match(/(\d+)\s*(?:call|C).*?bid\s*([0-9.]+)/i);
  if (callStrikeMatch) {
    result.data.strikes = result.data.strikes || {};
    result.data.strikes.call90DTE = {
      strike: parseFloat(callStrikeMatch[1]),
      bid: parseFloat(callStrikeMatch[2]),
      delta: 0.05 // Approximate 5-delta
    };
  }
  
  return result;
}

function buildFallbackData() {
  // Provide minimal fallback data when searches fail
  console.log('⚠️ Building fallback data - searches may have failed');
  
  return {
    ES: {
      currentPrice: 5400,
      openPrice: 5395,
      previousClose: 5390,
      high5d: 5450,
      low5d: 5350,
      high20d: 5500,
      low20d: 5300,
      atr: 45,
      rsi: 50,
      ema8: 5400,
      ema21: 5395,
      iv: 15,
      ivRank: 30,
      fallback: true
    },
    SPY: {
      currentPrice: 540,
      ivRank: 30,
      fallback: true
    },
    VIX: {
      currentLevel: 15,
      regime: 'NORMAL',
      fallback: true
    },
    TIME: {
      currentEST: new Date().toLocaleTimeString('en-US', { 
        timeZone: 'America/New_York',
        hour12: true 
      }),
      marketStatus: 'UNKNOWN'
    }
  };
}

function validateSearchedData(searchedData) {
  const validation = {
    valid: true,
    warnings: [],
    missingTickers: [],
    missingFields: []
  };
  
  // Check core required tickers
  const requiredTickers = ['ES', 'SPY', 'VIX'];
  requiredTickers.forEach(ticker => {
    if (!searchedData[ticker]) {
      validation.missingTickers.push(ticker);
      validation.valid = false;
    }
  });
  
  // Validate ES fields (most critical)
  if (searchedData.ES) {
    const requiredESFields = ['currentPrice', 'openPrice'];
    const optionalESFields = ['high20d', 'low20d', 'ivRank', 'atr', 'rsi'];
    
    requiredESFields.forEach(field => {
      if (searchedData.ES[field] == null) {
        validation.missingFields.push(`ES.${field}`);
        validation.valid = false;
      }
    });
    
    optionalESFields.forEach(field => {
      if (searchedData.ES[field] == null) {
        validation.warnings.push(`ES.${field} missing - some analysis limited`);
      }
    });
  }
  
  return validation;
}

// FRIDAY 0DTE COUNTDOWN FUNCTION
function calculate0DTECountdown(currentTime) {
  if (!currentTime || typeof currentTime !== 'string') {
    return { error: 'Invalid time format' };
  }
  
  const timeMatch = currentTime.match(/(\d{1,2}):(\d{2})\s*(AM|PM)?/i);
  if (!timeMatch) {
    return { error: 'Cannot parse time' };
  }
  
  let hour = parseInt(timeMatch[1]);
  const minute = parseInt(timeMatch[2]);
  const period = timeMatch[3]?.toUpperCase();
  
  if (period === 'PM' && hour !== 12) hour += 12;
  if (period === 'AM' && hour === 12) hour = 0;
  
  const currentMinutes = hour * 60 + minute;
  const targetMinutes = 10 * 60 + 30; // 10:30 AM
  const minutesRemaining = Math.max(0, targetMinutes - currentMinutes);
  
  if (minutesRemaining === 0) {
    return {
      status: 'READY',
      message: '🚀 0DTE execution window is OPEN!',
      minutesRemaining: 0
    };
  } else if (currentMinutes < 9 * 60) {
    return {
      status: 'TOO_EARLY',
      message: `⏰ Market not open yet. ${minutesRemaining} minutes until 10:30 AM`,
      minutesRemaining
    };
  } else {
    return {
      status: 'COUNTDOWN',
      message: `⏱️ ${minutesRemaining} minutes remaining until 10:30 AM execution`,
      minutesRemaining
    };
  }
}
```

## VALIDATION AND TESTING

```javascript
function validateSearchParsing() {
  const tests = [
    { 
      name: 'Price parsing', 
      fn: () => {
        const result = parseIndividualResult("ES is trading at $5421.50, up $11.50");
        return result.data.currentPrice === 5421.50;
      }
    },
    { 
      name: 'Range parsing', 
      fn: () => {
        const result = parseIndividualResult("5-day range: 5380 - 5485");
        return result.data.low5d === 5380 && result.data.high5d === 5485;
      }
    },
    { 
      name: 'IV parsing', 
      fn: () => {
        const result = parseIndividualResult("Implied Volatility: 15.2%");
        return result.data.iv === 15.2;
      }
    },
    {
      name: '0DTE countdown',
      fn: () => {
        const result = calculate0DTECountdown("10:15 AM");
        return result.minutesRemaining === 15;
      }
    },
    {
      name: 'Fallback data',
      fn: () => {
        const fallback = buildFallbackData();
        return fallback.ES && fallback.ES.currentPrice > 0;
      }
    }
  ];
  
  console.log('🧪 SEARCH_PARSING.txt Validation:');
  tests.forEach(test => {
    try {
      const result = test.fn();
      console.log(`${result ? '✅' : '❌'} ${test.name}`);
    } catch (error) {
      console.log(`❌ ${test.name}: ${error.message}`);
    }
  });
  
  return tests.every(test => {
    try { return test.fn(); } catch { return false; }
  });
}

// Auto-execute if manual mode is detected or API fails
if (typeof userInput !== 'undefined' && !userInput.includes('Mode: API')) {
  console.log('📊 Manual mode detected - SEARCH_PARSING.txt ready');
  console.log('🔍 Instructions: Execute the required searches above and paste results');
  console.log('📋 Framework will parse search results automatically');
  
  // Run validation
  validateSearchParsing();
} else {
  console.log('📋 SEARCH_PARSING.txt MODULE LOADED');  
  console.log('🔄 Fallback: Provides manual data collection when API_INTEGRATION.txt fails');
  console.log('🔗 Integration point: Builds searchedData for CORE_FRAMEWORK.txt');
  
  // Run validation
  validateSearchParsing();
}
```

---

**STATUS: SEARCH_PARSING.txt COMPLETE - 550 lines**
**FEATURES: Complete search result parsing patterns, Progressive Friday analysis (3 phases), integration examples, BP requirements table, and fallback data systems**