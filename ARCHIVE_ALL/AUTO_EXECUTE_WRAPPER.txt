# Tom King Trading Framework v17 - Auto-Execute Wrapper

## Purpose
This wrapper ensures the framework automatically executes with stored API credentials when provided to Claude, without requiring manual input.

## Instructions for Claude

When you receive this file along with the main framework, you should:

1. **IMMEDIATELY attempt API connection** using the stored credentials
2. **DO NOT ask for credentials** - they are already in the framework
3. **Execute the full analysis automatically**
4. **Only fall back to manual mode if API fails**

## Auto-Execute Code to Add at End of Framework

```javascript
// ============================================================
// AUTO-EXECUTE SECTION - RUNS IMMEDIATELY WHEN LOADED
// ============================================================

console.log('\nüöÄ TOM KING TRADING FRAMEWORK v17 - AUTO-EXECUTING');
console.log('============================================================\n');

// Check for stored credentials
if (typeof API_CREDENTIALS !== 'undefined' && API_CREDENTIALS.CLIENT_SECRET) {
    console.log('‚úÖ Stored credentials detected');
    console.log('üîÑ Initializing API connection...\n');
    
    // Auto-execute the framework
    (async () => {
        try {
            // Initialize API mode with stored credentials
            const apiContext = await initializeAPIMode(
                API_CREDENTIALS.CLIENT_SECRET,
                API_CREDENTIALS.REFRESH_TOKEN,
                'production'
            );
            
            if (apiContext) {
                // Display account status
                console.log('üìä ACCOUNT STATUS:');
                console.log(`   Account: ${apiContext.api.accountNumber}`);
                console.log(`   Net Liq: ¬£${apiContext.accountStatus.netLiq.toLocaleString()}`);
                console.log(`   Buying Power: ¬£${apiContext.accountStatus.buyingPower.toLocaleString()}`);
                console.log(`   Phase: ${apiContext.userData.phase}`);
                console.log(`   Positions: ${apiContext.userData.currentPositions}\n`);
                
                // Display market data
                console.log('üìà MARKET DATA:');
                console.log(`   ES: ${apiContext.searchedData.ES.currentPrice}`);
                console.log(`   SPY: ${apiContext.searchedData.SPY.currentPrice}`);
                console.log(`   VIX: ${apiContext.searchedData.VIX.current} (${apiContext.searchedData.VIX.regime.description})\n`);
                
                // Build framework input
                const userInput = [
                    `¬£${Math.round(apiContext.accountStatus.netLiq)}`,
                    apiContext.userData.currentPositions,
                    `${((apiContext.accountStatus.buyingPower / apiContext.accountStatus.netLiq) * 100).toFixed(1)}%`,
                    new Date().toLocaleDateString('en-US', { 
                        weekday: 'long', 
                        month: 'numeric', 
                        day: 'numeric',
                        hour: 'numeric',
                        minute: 'numeric',
                        timeZone: 'America/New_York'
                    }) + ' EST',
                    `VIX ${apiContext.searchedData.VIX.current}`,
                    apiContext.accountStatus.netLiq > 111000 ? 'Yes' : 'No'
                ].join(' | ');
                
                // Execute pattern analysis
                console.log('üîç Running pattern analysis...\n');
                const results = typeof analyzePatterns === 'function' 
                    ? analyzePatterns(userInput, apiContext.searchedData)
                    : executeFramework(userInput, apiContext.searchedData);
                
                // Display recommendations
                if (results && results.recommendations) {
                    console.log('üí° RECOMMENDATIONS:');
                    console.log(results.recommendations);
                }
                
                // Check for Friday 0DTE opportunity
                const now = new Date();
                const isFriday = now.getDay() === 5;
                const hour = now.getHours();
                const minute = now.getMinutes();
                const after1030 = hour > 10 || (hour === 10 && minute >= 30);
                
                if (isFriday && after1030) {
                    console.log('\nüìÖ FRIDAY 0DTE OPPORTUNITY DETECTED');
                    if (results.strikeRecommendation) {
                        // Prepare order for manual submission
                        const orderDetails = await apiContext.orderBuilder.prepare0DTESpread(
                            results.strikeRecommendation.direction || 'CALL',
                            results.strikeRecommendation.strikes || { short: 5500, long: 5530 },
                            5.00
                        );
                        
                        console.log('\nüìã ORDER PREPARED FOR MANUAL SUBMISSION:');
                        console.log(`   Strategy: ${orderDetails.strategy}`);
                        console.log(`   Direction: ${orderDetails.direction}`);
                        console.log(`   Strikes: ${orderDetails.strikes.short}/${orderDetails.strikes.long}`);
                        console.log(`   Target Credit: ¬£${orderDetails.targetCredit}`);
                        console.log(`   BP Impact: ¬£${orderDetails.bpEffect}`);
                        console.log('\n' + orderDetails.instructions);
                    }
                }
                
                // Cleanup
                if (apiContext.dxlink) apiContext.dxlink.disconnect();
                if (apiContext.accountStreamer) apiContext.accountStreamer.disconnect();
                
                console.log('\n‚úÖ Framework execution complete!');
                
            } else {
                throw new Error('API initialization returned null');
            }
            
        } catch (error) {
            console.error('\n‚ùå API Error:', error.message);
            console.log('\nüìù Falling back to MANUAL MODE');
            console.log('Please provide your account information:');
            console.log('Format: ¬£[amount] | [positions] | [BP%] | [Day Date Time] | VIX [level] | [PM Y/N]');
            console.log('Example: ¬£45000 | ES LT112 (85 DTE, 6420, +5%) | 32% | Friday Jan 10 10:15 AM EST | VIX 15.2 | No');
        }
    })();
    
} else {
    console.log('üìù MANUAL MODE - No stored credentials found');
    console.log('Please provide your account information:');
    console.log('Format: ¬£[amount] | [positions] | [BP%] | [Day Date Time] | VIX [level] | [PM Y/N]');
    console.log('Example: ¬£45000 | ES LT112 (85 DTE, 6420, +5%) | 32% | Friday Jan 10 10:15 AM EST | VIX 15.2 | No');
}
```

## How to Use

1. **Add to Framework**: Copy the auto-execute code above and paste it at the END of the TOM KING TRADING FRAMEWORK v17.txt file

2. **When Providing to Claude**: Simply say:
   - "Run the framework" 
   - "Execute with API"
   - Or just provide the framework file

3. **Expected Behavior**:
   - Framework automatically detects stored credentials
   - Connects to TastyTrade API
   - Fetches real-time data
   - Runs full analysis
   - Displays recommendations
   - Prepares orders for manual submission

4. **If API Fails**:
   - Automatically falls back to manual mode
   - Prompts for account information
   - Continues with web search mode

## Benefits

1. **No Manual Input Required**: Framework runs immediately
2. **Seamless Experience**: No need to provide credentials each time
3. **Automatic Fallback**: Switches to manual mode if API fails
4. **Complete Analysis**: Full pattern analysis and recommendations
5. **Order Preparation**: Orders ready for manual submission

## Security Note

The credentials are stored in the framework file itself. Ensure:
- Keep the framework file secure
- Don't share the file with credentials
- Regularly update refresh token if needed
- Use sandbox mode for testing